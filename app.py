import os
import google.generativeai as genai
from flask import Flask, render_template, request, session, redirect, url_for

# --- Configura√ß√µes da Aplica√ß√£o ---
app = Flask(__name__, template_folder='templates', static_folder='static')
app.secret_key = os.urandom(24)

# --- Configura√ß√µes do Gemini API ---
GOOGLE_API_KEY = "AIzaSyANk03n6Z6pWzK7dAthderUXfIvJBSH5OI"

# Configurando o Gemini
genai.configure(api_key=GOOGLE_API_KEY)
modelo_gemini = genai.GenerativeModel('gemini-2.5-flash')

NOME_ARQUIVO_CONTEXTO = "assistente_academica.txt"


def carregar_contexto():
    """L√™ o arquivo de texto da base de conhecimento."""
    try:
        with open(NOME_ARQUIVO_CONTEXTO, 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        print(f"AVISO: Arquivo de contexto '{NOME_ARQUIVO_CONTEXTO}' n√£o encontrado.")
        return "Nenhum contexto espec√≠fico fornecido."


def construir_prompt_sistema():
    """Cria a diretiva inicial para o modelo com base no contexto."""
    contexto_texto = carregar_contexto()
    prompt = f"""Voc√™ √© UniHelp, uma assistente acad√™mica da UniEVANG√âLICA.
Responda de forma clara e objetiva usando APENAS as informa√ß√µes abaixo.

BASE DE CONHECIMENTO:
{contexto_texto}

REGRAS:
- Responda apenas com dados da base
- Seja breve e direta
- Se n√£o souber, pe√ßa mais informa√ß√µes"""

    return prompt


def obter_resposta_gemini(historico_mensagens):
    """Envia o hist√≥rico para o Gemini API e retorna a resposta."""
    try:
        historico_gemini = []

        for msg in historico_mensagens:
            if msg['role'] == 'system':
                historico_gemini.append({
                    'role': 'model',
                    'parts': [msg['content']]
                })
            elif msg['role'] == 'user':
                historico_gemini.append({
                    'role': 'user',
                    'parts': [msg['content']]
                })
            elif msg['role'] == 'assistant':
                historico_gemini.append({
                    'role': 'model',
                    'parts': [msg['content']]
                })

        print("\nINFO: Enviando requisi√ß√£o para o Gemini API...")

        chat = modelo_gemini.start_chat(history=historico_gemini[:-1])
        ultima_mensagem = historico_mensagens[-1]['content']
        resposta = chat.send_message(ultima_mensagem)

        print("INFO: Resposta recebida do Gemini! ‚ö°")
        return resposta.text

    except Exception as e:
        print(f"ERRO: N√£o foi poss√≠vel conectar ao Gemini API.")
        print(f"Detalhe do erro: {e}")

        if "API_KEY" in str(e) or "invalid" in str(e).lower():
            return "‚ùå ERRO: Chave de API inv√°lida. Verifique se voc√™ configurou corretamente a GOOGLE_API_KEY no c√≥digo."
        elif "quota" in str(e).lower():
            return "‚ö†Ô∏è ERRO: Voc√™ atingiu o limite de requisi√ß√µes gratuitas do dia. Tente novamente amanh√£."
        else:
            return f"‚ùå Erro ao conectar com o Gemini: {str(e)}"


# --- Rotas da Aplica√ß√£o Web (Flask) ---

@app.route('/')
def index():
    """Redireciona para login se n√£o estiver logado, sen√£o para chat"""
    if 'usuario_logado' in session:
        return redirect(url_for('chat'))
    return redirect(url_for('login'))


@app.route('/login', methods=['GET', 'POST'])
def login():
    """P√°gina de login"""
    if request.method == 'POST':
        ra = request.form.get('ra')
        senha = request.form.get('password')

        # AQUI VOC√ä ADICIONA SUA L√ìGICA DE AUTENTICA√á√ÉO
        # Por enquanto, aceita qualquer login para teste
        if ra and senha:
            session['usuario_logado'] = ra
            session['nome_usuario'] = ra  # Voc√™ pode pegar o nome real do banco
            return redirect(url_for('chat'))
        else:
            return render_template('login.html', erro="RA ou senha inv√°lidos")

    return render_template('login.html')


@app.route('/cadastro', methods=['GET', 'POST'])
def cadastro():
    """P√°gina de cadastro"""
    if request.method == 'POST':
        # Coleta os dados do formul√°rio
        dados = {
            'nome_completo': request.form.get('nome_completo'),
            'email': request.form.get('email'),
            'cpf': request.form.get('cpf'),
            'ra': request.form.get('ra'),
            'curso': request.form.get('curso'),
            'senha': request.form.get('password')
        }

        # AQUI VOC√ä ADICIONA SUA L√ìGICA DE CADASTRO NO BANCO
        print(f"Novo cadastro: {dados}")

        # Ap√≥s cadastrar, redireciona para login
        return redirect(url_for('login'))

    return render_template('cadastro.html')


@app.route('/chat', methods=['GET', 'POST'])
def chat():
    """P√°gina do chat (protegida - precisa estar logado)"""
    # Verifica se est√° logado
    if 'usuario_logado' not in session:
        return redirect(url_for('login'))

    # Inicializa hist√≥rico se n√£o existir
    if 'historico' not in session:
        prompt_sistema = construir_prompt_sistema()
        session['historico'] = [{"role": "system", "content": prompt_sistema}]

    if request.method == 'POST':
        pergunta_usuario = request.form.get('pergunta', '').strip()

        if pergunta_usuario:
            # Adiciona pergunta do usu√°rio
            session['historico'].append({"role": "user", "content": pergunta_usuario})

            # Obt√©m resposta do Gemini
            resposta_ia = obter_resposta_gemini(session['historico'])

            # Adiciona resposta da IA
            session['historico'].append({"role": "assistant", "content": resposta_ia})

            # Limita o hist√≥rico
            if len(session['historico']) > 9:
                session['historico'] = [session['historico'][0]] + session['historico'][-8:]

            session.modified = True

    # Filtra mensagens do sistema
    historico_para_exibir = [msg for msg in session.get('historico', []) if msg['role'] != 'system']

    return render_template('index.html', historico=historico_para_exibir)


@app.route('/limpar', methods=['POST'])
def limpar_historico():
    """Limpa o hist√≥rico de conversa da sess√£o."""
    session.pop('historico', None)
    print("INFO: Hist√≥rico limpo pelo usu√°rio")
    return '', 204


@app.route('/logout')
def logout():
    """Faz logout do usu√°rio"""
    session.clear()
    return redirect(url_for('login'))


# --- Execu√ß√£o da Aplica√ß√£o ---
if __name__ == '__main__':
    print("=" * 60)
    print("INFO: Assistente Acad√™mico UniHelp ‚ö°")
    print("=" * 60)
    print(f"‚úÖ Chave de API configurada!")
    print(f"‚úÖ Modelo: {modelo_gemini.model_name}")
    print(f"‚úÖ Carregando contexto de '{NOME_ARQUIVO_CONTEXTO}'")

    contexto = carregar_contexto()
    print(f"‚úÖ Contexto carregado: {len(contexto)} caracteres")
    print("\nüåê Rotas dispon√≠veis:")
    print("   ‚Ä¢ http://localhost:5000/       ‚Üí Redireciona para login")
    print("   ‚Ä¢ http://localhost:5000/login  ‚Üí Tela de login")
    print("   ‚Ä¢ http://localhost:5000/cadastro ‚Üí Tela de cadastro")
    print("   ‚Ä¢ http://localhost:5000/chat   ‚Üí Chat (precisa estar logado)")
    print("=" * 60)

    app.run(debug=True)